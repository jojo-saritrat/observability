logging {
  level  = "info"
  format = "logfmt"
}

livedebugging {
  enabled = true
}

prometheus.exporter.unix "local_system" {}

prometheus.scrape "scrape_metrics" {
  targets         = beyla.ebpf.app_apm.targets
  forward_to      = []
  scrape_interval = "10s"
}

// --- 2. Beyla (eBPF) - แหล่งข้อมูล Traces และ RED Metrics อัตโนมัติ ---
beyla.ebpf "app_apm" {
  // ค้นหา service ที่เปิด port 8080 เพื่อ instrument
  trace_printer = "json"
  debug = true
  enforce_sys_caps = true
  discovery {
    services {
      open_ports = "8000-9999"
    }
  }

  // กำหนดการส่งออกข้อมูลที่ Beyla สร้างขึ้น
  output {
    // ส่ง RED metrics ที่สร้างโดย Beyla ไปยัง Mimir
    // metrics = [prometheus.remote_write.mimir.receiver]

    // ⭐ ส่ง Traces ไปยัง 2 ที่:
    //    1. ไปยัง Tempo เพื่อเก็บ Trace ต้นฉบับ
    //    2. ไปยัง spanmetrics connector เพื่อสร้าง Service Graph
    traces  = [
      otelcol.connector.servicegraph.default.input,
      // otelcol.exporter.otlp.tempo.input,
      // otelcol.connector.spanmetrics.main.input,
    ]
  }
}

// Ref: https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.connector.servicegraph/
otelcol.connector.servicegraph "default" {
  dimensions = ["http.method", "http.target"]
  output {
    metrics  = [otelcol.exporter.prometheus.servicegraph_endpoint.input]
  }
}

// ตั้งค่า Endpoint สำหรับ Prometheus Scrape Service Graph Metrics
otelcol.exporter.prometheus "servicegraph_endpoint" {
  forward_to = []
}

